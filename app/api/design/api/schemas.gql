# AUTO GENERATED BY cmsapi-cli; DO NOT EDIT.
# ↑これはつけてあげる

########## ↓↓必ず入る定義↓↓ ##########
scalar Date

type BaseType {
    id: ID!
    created_at: Date!
    updated_at: Date!
    deleted_at: Date
}

type MutationResult {
    status: String!
}
########## ↑↑必ず入る定義↑↑ ##########

########## ↓↓設定ファイルから自動生成される定義↓↓ ##########
# Types
type Photo implements BaseType {
    image_id: ID!
    alt: String!
}
type WritePhoto implements BaseType {
    image_id: ID!
    alt: String!
}

type Address implements BaseType {
    prefecture: String!
    ward: String!
    town: String!
    village: String!
}

type Article implements BaseType {
    publish_at: Date!
    expire_at: Date
}

type WriteArticle implements BaseType {
    publish_at: Date!
    expire_at: Date
}

# Models
type Top implements Article {
    title: String!
    description: String!
    top_image: Photo!
    address: Address!
    sentence: [TopSentence]
    header: TopHeader
    list: [Photo]
    link: [Work]
}
type TopSentence {
    photo: Photo
    paragraph: String
}
type TopHeader {
    photo: Photo
    paragraph: String
}

type WriteTop implements WriteArticle {
    title: String!
    description: String!
    top_image: Photo!
    address: Address!
    sentence: [TopSentence]!
    header: TopHeader
    list: [Photo]!
    # 書き込み時だけ related はID指定になる
    link: [ID]!
}
type WriteTopSentence {
    photo: WritePhoto
    paragraph: String
}
type WriteTopHeader {
    photo: WritePhoto
    paragraph: String
}

type Work implements Article {
    title: String!
    description: String!
    work_refs(id: ID, title_like: String, description_like: String, ...): [WorkRefs]!
}

########## ↓↓必ず入る定義↓ ##########
schema {
  query: Query
  mutation: Mutation
}

type Query {
    # ありそうな条件を大量に生成する
    top(id: ID, title_like: String, description_like: String, ...): [Top]!
    work(id: ID, title_like: String, description_like: String, ...): [Work]!
}

type Mutation {
    top(value: WriteTop!): MutationResult
    work(value: Work!): MutationResult
}